{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/Heroimages/Heroimage.styles.js","components/Heroimages/index.js","components/Grid/Grid.styleds.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spiner/index.js","components/Spiner/Spiner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/BreadCrumb/BreadCrumb.style.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","Warpper","image","Text","HeroImage","title","text","propsType","PropTypes","string","Grid","header","children","propTeypes","PropTeypes","Image","Thumb","movieId","clickable","Spiner","SearchBar","setSearchTeam","useState","state","setState","inital","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","propTyes","func","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","setSearchTerm","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","console","log","setItem","useMovieFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","textDecoration","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","object","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieDFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6a0a45c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.35f4d399.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.e7029961.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  max-width: var(--maxWidth);\r\n  padding: 20px 0;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const LogoImg = styled.img`\r\n  width: 200px;\r\n\r\n  @media screen and (max-width: 500px) {\r\n    width: 150px;\r\n  }\r\n`;\r\n\r\nexport const TMDBLogoImg = styled.img`\r\n  width: 100px;\r\n  @media screen and (max-width: 500px) {\r\n    width: 80px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport RMDBLogo from \"../../images/react-movie-logo.svg\";\r\nimport TMDBLogo from \"../../images/tmdb_logo.svg\";\r\n\r\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from \"./Header.styles\";\r\n\r\nconst Header = () => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\">\r\n        <LogoImg src={RMDBLogo} alt=\"rmdb-logo\" />\r\n      </Link>\r\n      <TMDBLogoImg src={TMDBLogo} alt=\"tmdb-logo\" />\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\n\r\nexport default Header;\r\n","// Configuration for TMDB API\r\n// Read more about the API here: https://developers.themoviedb.org/\r\n\r\nconst API_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = process.env.REACT_APP_API_KEY;\r\n\r\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\r\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\r\n// For login and voting\r\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\r\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\r\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\r\n\r\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\r\n// Sizes: w300, w780, w1280, original\r\nconst BACKDROP_SIZE = 'w1280';\r\n// w92, w154, w185, w342, w500, w780, original\r\nconst POSTER_SIZE = 'w780';\r\n\r\nexport {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  IMAGE_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  POSTER_SIZE,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL,\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Warpper = styled.div`\r\n  background: linear-gradient(\r\n      to bottom,\r\n      rgba(0, 0, 0, 0) 41%,\r\n      rgba(0, 0, 0, 0.65) 100%\r\n    ),\r\n    url(${({ image }) => image}), var(--darkGrey);\r\n  background-size: 100%, cover;\r\n  background-position: center;\r\n  height: 600px;\r\n  position: relative;\r\n  animation: animateHeroImage 1s;\r\n\r\n  @keyframes animateHeroImage {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 50px;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  z-index: 100;\r\n  max-width: 700px;\r\n  position: absolute;\r\n  bottom: 40px;\r\n  margin-right: 20px;\r\n  min-height: 100px;\r\n  color: var(--white);\r\n\r\n  h1 {\r\n    font-size: var(--fontSuperBig);\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n\r\n  p {\r\n    font-size: var(--fontMed);\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: var(--fontSmall);\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 720px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n//styled\r\nimport { Warpper, Content, Text } from \"./Heroimage.styles\";\r\n\r\nconst HeroImage = ({ image, title, text }) => (\r\n  <Warpper image={image}>\r\n    <Content>\r\n      <Text>\r\n        <h1>{title}</h1>\r\n        <p>{text}</p>\r\n      </Text>\r\n    </Content>\r\n  </Warpper>\r\n);\r\n\r\nHeroImage.propsType = {\r\n  image: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n};\r\n\r\nexport default HeroImage;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: var(--maxWidth);\r\n    margin: 0 auto;\r\n    padding: 0 50px;\r\n\r\n    h1{\r\n        color: var(--medGrey);\r\n    }\r\n    h1{\r\n        @media screen and (maxWidth: 768px){\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n    grid-gap: 2rem;\r\n`;","import React from \"react\";\r\nimport PropTeypes from 'prop-types';\r\n//Styles\r\nimport { Wrapper, Content } from \"./Grid.styleds\";\r\n\r\nconst Grid = ({ header, children }) => (\r\n  <Wrapper>\r\n    <h1>{header}</h1>\r\n    <Content>{children}</Content>\r\n  </Wrapper>\r\n);\r\n\r\nGrid.propTeypes = {\r\n  header: PropTeypes.string\r\n}\r\n\r\nexport default Grid;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Image = styled.img`\r\n    width: 100%;\r\n    max-width: 720px;\r\n    transition: all 0.3s;\r\n    object-fit: cover;\r\n    border-radius: 20px;\r\n    animation: animateThumb 0.5s;\r\n\r\n    :hover{\r\n        opacity: 0.8;\r\n    }\r\n\r\n    @keyframes animateThumb{\r\n        from{\r\n            opacity: 0;\r\n        }to{\r\n            opacity: 1;\r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { Image } from \"./Thumb.styles\";\r\n\r\nconst Thumb = ({ image, movieId, clickable }) => (\r\n  <div>\r\n    {clickable ? (\r\n      <Link to={`/${movieId}`}>\r\n        <Image src={image} alt=\"movie-thumb\" />\r\n      </Link>\r\n    ) : (\r\n      <Image src={image} alt=\"movie-thumb\" />\r\n    )}\r\n  </div>\r\n);\r\n\r\nThumb.propTypes = {\r\n  image: PropTypes.string,\r\n  movieId: PropTypes.number,\r\n  clickable: PropTypes.bool,\r\n};\r\n\r\nexport default Thumb;\r\n","import { Spiner } from './Spiner.styles';\r\n\r\nexport default Spiner;","import styled from \"styled-components\";\r\n\r\nexport const Spiner = styled.div`\r\n  border: 5px solid var(--lightGrey);\r\n  border-top: 5px solid var(--medGrey);\r\n  border-radius: 50%;\r\n  width: 50px;\r\n  height: 50%50px;\r\n  animation: spin 0.58s linear infinite;\r\n  margin: 20px auto;\r\n\r\n  @keyframes spin {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(300deg);\r\n    }\r\n  }\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/search-icon.bb4c697f.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Warpper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 100px;\r\n  background: var(--darkGrey);\r\n  padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  position: relative;\r\n  max-width: var(--maxWidth);\r\n  width: 100%;\r\n  height: 55px;\r\n  background: var(--medGrey);\r\n  margin: 0 auto;\r\n  border-radius: 40px;\r\n  color: var(--white);\r\n\r\n  img {\r\n    position: absolute;\r\n    left: 15px;\r\n    top: 14px;\r\n    width: 30px;\r\n  }\r\n\r\n  input {\r\n    font-size: var(--fontBig);\r\n    position: absolute;\r\n    left: 0px;\r\n    margin: 8px 0;\r\n    padding: 0 0 0 60px;\r\n    border: 0;\r\n    width: 95%;\r\n    background: transparent;\r\n    height: 40px;\r\n    color: var(--white);\r\n\r\n    :focus {\r\n      outline: none;\r\n    }\r\n\r\n    @media screen and (max-width: 720px) {\r\n      font-size: 28px;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//Image\r\nimport searchIcon from \"../../images/search-icon.svg\";\r\n\r\n//styles\r\nimport { Warpper, Content } from \"./SearchBar.styles\";\r\n\r\nconst SearchBar = ({ setSearchTeam }) => {\r\n  const [state, setState] = useState(\"\");\r\n  const inital = useRef(true);\r\n\r\n  useEffect(() => {\r\n    if (inital.current) {\r\n      inital.current = false;\r\n      return;\r\n    }\r\n\r\n    const timer = setTimeout(() => {\r\n      setSearchTeam(state);\r\n    }, 500);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, [setSearchTeam, state]);\r\n\r\n  return (\r\n    <Warpper>\r\n      <Content>\r\n        <img src={searchIcon} alt=\"search-icon\" />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search Movie\"\r\n          onChange={(event) => setState(event.currentTarget.value)}\r\n          value={state}\r\n        />\r\n      </Content>\r\n    </Warpper>\r\n  );\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  callback: PropTypes.func,\r\n};\r\n\r\nexport default SearchBar;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.button`\r\n    display: block;\r\n    background: var(--darkGrey);\r\n    width: 25%;\r\n    min-width: 200px;\r\n    height: 60px;\r\n    border-radius: 30px;\r\n    color: var(--white);\r\n    border: 0;\r\n    font-size: var(--fontBig);\r\n    margin: 20px auto;\r\n    transition: all 0.3s;\r\n    outline: none;\r\n    cursor: pointer;\r\n\r\n    :hover{\r\n        opacity: 0.8;\r\n    }\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//Styles\r\nimport { Wrapper } from \"./Button.styles\";\r\n\r\nconst Button = ({ text, callback }) => (\r\n  <Wrapper type=\"button\" onClick={callback}>\r\n    {text}\r\n  </Wrapper>\r\n);\r\n\r\nButton.propTyes = {\r\n  text: PropTypes.string,\r\n  callback: PropTypes.func,\r\n};\r\n\r\nexport default Button;\r\n","import {\r\n  SEARCH_BASE_URL,\r\n  POPULAR_BASE_URL,\r\n  API_URL,\r\n  API_KEY,\r\n  REQUEST_TOKEN_URL,\r\n  LOGIN_URL,\r\n  SESSION_ID_URL\r\n} from './config';\r\n\r\nconst defaultConfig = {\r\n  method: 'POST',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n};\r\n\r\nconst apiSettings = {\r\n  fetchMovies: async (searchTerm, page) => {\r\n    const endpoint = searchTerm\r\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\r\n      : `${POPULAR_BASE_URL}&page=${page}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchMovie: async movieId => {\r\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\r\n    return await (await fetch(endpoint)).json();\r\n  },\r\n  fetchCredits: async movieId => {\r\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\r\n    return await (await fetch(creditsEndpoint)).json();\r\n  },\r\n  // Bonus material below for login\r\n  getRequestToken: async () => {\r\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\r\n    return reqToken.request_token;\r\n  },\r\n  authenticate: async (requestToken, username, password) => {\r\n    const bodyData = {\r\n      username,\r\n      password,\r\n      request_token: requestToken\r\n    };\r\n    // First authenticate the requestToken\r\n    const data = await (\r\n      await fetch(LOGIN_URL, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify(bodyData)\r\n      })\r\n    ).json();\r\n    // Then get the sessionId with the requestToken\r\n    if (data.success) {\r\n      const sessionId = await (\r\n        await fetch(SESSION_ID_URL, {\r\n          ...defaultConfig,\r\n          body: JSON.stringify({ request_token: requestToken })\r\n        })\r\n      ).json();\r\n      return sessionId;\r\n    }\r\n  },\r\n  rateMovie: async (sessionId, movieId, value) => {\r\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\r\n\r\n    const rating = await (\r\n      await fetch(endpoint, {\r\n        ...defaultConfig,\r\n        body: JSON.stringify({ value })\r\n      })\r\n    ).json();\r\n\r\n    return rating;\r\n  }\r\n};\r\n\r\nexport default apiSettings;\r\n","// Convert time to hours and minutes\r\nexport const calcTime = (time) => {\r\n  const hours = Math.floor(time / 60);\r\n  const mins = time % 60;\r\n  return `${hours}h ${mins}m`;\r\n};\r\n// Convert a number to money formatting\r\nexport const convertMoney = (money) => {\r\n  const formatter = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n    minimumFractionDigits: 0,\r\n  });\r\n  return formatter.format(money);\r\n};\r\n\r\nexport const isPersistedState = (stateName) => {\r\n  const sessionState = sessionStorage.getItem(stateName);\r\n  return sessionState && JSON.parse(sessionState);\r\n};\r\n","import { useState, useEffect, useRef } from \"react\";\r\n//API\r\nimport API from \"../API\";\r\n//session\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0,\r\n};\r\n\r\nexport const useMovieFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [state, setState] = useState(initialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n  const fetchMovies = async (page, searchTerm = \"\") => {\r\n    try {\r\n      setError(false);\r\n      setLoading(true);\r\n\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      setState((prev) => ({\r\n        ...movies,\r\n        results:\r\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results],\r\n      }));\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  //Initial and search\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      const sessionState = isPersistedState(\"homeState\");   \r\n      if (sessionState) {\r\n        console.log('session')\r\n        setState(sessionState);\r\n        return;\r\n      }\r\n    }\r\n    console.log('API')\r\n    setState(initialState);\r\n    fetchMovies(1, searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  //load more\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return;\r\n\r\n    fetchMovies(state.page + 1, searchTerm);\r\n    setIsLoadingMore(false);\r\n  }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n  //Write to sessionStore\r\n  useEffect(() => {\r\n    if (!searchTerm) {\r\n      sessionStorage.setItem(\"homeState\", JSON.stringify(state));\r\n    }\r\n  }, [searchTerm, state]);\r\n\r\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from \"react\";\r\n\r\n//Config\r\nimport {\r\n  POPULAR_BASE_URL,\r\n  BACKDROP_SIZE,\r\n  IMAGE_BASE_URL,\r\n  POSTER_SIZE,\r\n} from \"../config\";\r\n//Components\r\nimport HeroImage from \"./Heroimages\";\r\nimport Grid from \"./Grid\";\r\nimport Thumb from \"./Thumb\";\r\nimport Spiner from \"./Spiner\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Button from \"./Button\";\r\n\r\n//Hook\r\nimport { useMovieFetch } from \"../hooks/useHomeFetch\";\r\n\r\n// Image\r\nimport NoImage from \"../images/no_image.jpg\";\r\n\r\nconst Home = () => {\r\n  const { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore } =\r\n    useMovieFetch();\r\n\r\n  // console.log(state);\r\n\r\n  if(error) return <div>Someting went wrong ...</div>\r\n\r\n  return (\r\n    <>\r\n      {!searchTerm && state.results[0] ? (\r\n        <HeroImage\r\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\r\n          title={state.results[0].original_title}\r\n          text={state.results[0].overview}\r\n        />\r\n      ) : null}\r\n      <SearchBar setSearchTeam={setSearchTerm} />\r\n      <Grid header={searchTerm ? \"Search Result\" : \"Popolar Movies\"}>\r\n        {state.results.map((movie) => (\r\n          <Thumb\r\n            key={movie.id}\r\n            clickable\r\n            image={\r\n              movie.poster_path\r\n                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\r\n                : NoImage\r\n            }\r\n            movieId={movie.id}\r\n          />\r\n        ))}\r\n      </Grid>\r\n      {loading && <Spiner />}\r\n      {state.page < state.total_pages && !loading && (\r\n        <Button text=\"Load More\" callback={() => setIsLoadingMore(true)} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%auto;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    max-width: var(--maxWidth);\r\n    padding: 0 20px;\r\n\r\n    span{\r\n        font-size: var(--fontMed);\r\n        color: var(--white);\r\n        padding-right: 10px;\r\n        \r\n\r\n        @media screen and (max-width: 768px){\r\n            font-size: var(--fontSmall)\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n//styles\r\nimport { Wrapper, Content } from \"./BreadCrumb.style\";\r\n\r\nconst BreadCrumb = ({movieTitle}) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <Link to=\"/\" style={{ textDecoration: 'none' }}>\r\n          <span>Home</span>\r\n      </Link>\r\n        <span>|</span>\r\n        <span>{movieTitle}</span>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n  movieTitle: PropTypes.string\r\n}\r\n\r\nexport default BreadCrumb;\r\n","import styled from \"styled-components\";\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from \"../../config\";\r\n\r\nexport const Warpper = styled.div`\r\n  background: ${({backdrop}) =>\r\n    backdrop ? `URL(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : \"#000\"};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieInfo 1s;\r\n\r\n  @keyframes animateMovieInfo{\r\n      from{\r\n            opacity: 0;\r\n      }\r\n      to{\r\n        opacity: 1;\r\n      }\r\n  }\r\n\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWith);\r\n    margin: 0 auto;\r\n    background: rgba(0,0,0,0.7);\r\n    border-radius: 20px;\r\n\r\n    @media screen and (max-width: 768px){\r\n        display: block;\r\n        max-height: none;\r\n    }\r\n\r\n`;\r\n\r\nexport const Text = styled.div`\r\n    width: 100%;\r\n    padding: 20px 40px;\r\n    color: var(--white);\r\n    overflow: hidden;\r\n\r\n    .rating-directors{\r\n        display: flex;\r\n        justify-content: flex-start;\r\n    }\r\n    .score{\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        width: 35px;\r\n        height: 35px;\r\n        background: #fff;\r\n        color: black;\r\n        font-weight: 800;\r\n        border-radius: 50%;\r\n        margin: 0;\r\n    }\r\n    .director{\r\n        margin: 0 0 0 40px;\r\n\r\n        p{\r\n            margin: 0%;\r\n        }\r\n    }\r\n\r\n    h1{\r\n        @media screen and (max-width: 768px){\r\n            font-size: var(--fontBig);\r\n        }\r\n    }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// Components\r\nimport Thumb from \"../Thumb\";\r\n//config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../../config\";\r\n//Image\r\nimport NoImage from \"../../images/no_image.jpg\";\r\n//styles\r\nimport { Warpper, Content, Text } from \"./MovieInfo.styles\";\r\n\r\nconst MovieInfo = ({ movie }) => (\r\n  <Warpper backdrop={movie.backdrop_path}>\r\n    <Content>\r\n      <Thumb\r\n        image={\r\n          movie.poster_path\r\n            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n            : NoImage\r\n        }\r\n        clickable={false}\r\n        alt=\"movie-thumb\"\r\n      />\r\n      <Text>\r\n          <h1>{movie.title}</h1>\r\n          <h3>PLOT</h3>\r\n          <p>{movie.overview}</p>\r\n\r\n          <div className=\"rating-directors\">\r\n              <div>\r\n                  <h3>RATING</h3>\r\n                  <div className=\"score\">{movie.vote_average}</div>\r\n              </div>\r\n              <div className=\"director\">\r\n                    <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\r\n                    {movie.directors.map(director => (\r\n                        <p key={director.credit_id}>{director.name}</p>\r\n                    ))}\r\n              </div>\r\n          </div>\r\n      </Text>\r\n    </Content>\r\n  </Warpper>\r\n);\r\n\r\nMovieInfo.propsType = {\r\n  movie: PropTypes.object,\r\n};\r\n\r\n\r\nexport default MovieInfo;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .column{\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        background: var(--medGrey);\r\n        border-radius: 20px;\r\n        margin: 0 20px;\r\n        flex: 1;\r\n\r\n        :first-child{\r\n            margin-left: 0;\r\n        }\r\n\r\n        :last-child{\r\n            margin-right: 0;\r\n        }\r\n    }\r\n\r\n    @media screen and (max-width: 768px){\r\n        display: block;\r\n\r\n        .column{\r\n          margin: 20px 0;  \r\n        }\r\n    }\r\n`;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//helper\r\nimport { calcTime, convertMoney } from \"../../helpers\";\r\n//styleds\r\nimport { Wrapper, Content } from \"./MovieInfoBar.styles\";\r\n\r\nconst MovieInfoBar = ({ time, budget, revenue }) => (\r\n  <Wrapper>\r\n    <Content>\r\n      <div className=\"column\">\r\n        <p>Running time: {calcTime(time)}</p>\r\n      </div>\r\n      <div className=\"column\">\r\n        <p>Budget: {convertMoney(budget)}</p>\r\n      </div>\r\n      <div className=\"column\">\r\n        <p>Revenue: {convertMoney(revenue)}</p>\r\n      </div>\r\n    </Content>\r\n  </Wrapper>\r\n);\r\n\r\nMovieInfoBar.propTypes = {\r\n  time: PropTypes.number,\r\n  budget: PropTypes.number,\r\n  revenue: PropTypes.number\r\n}\r\n\r\nexport default MovieInfoBar;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  color: var(--white);\r\n  background: var(--darkGrey);\r\n  border-radius: 20px;\r\n  padding: 5px;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    margin: 10px 0 0 0;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n    display: block;\r\n    width: 100%;\r\n    height: 200px;\r\n    object-fit: cover;\r\n    border-radius: 15px;\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n//styled\r\nimport { Wrapper, Image } from \"./Actor.styles\";\r\n\r\nconst Actor = ({ name, character, imageUrl }) => (\r\n  <Wrapper>\r\n    <Image src={imageUrl} alt=\"actor-thumb\" />\r\n    <h3>{name}</h3>\r\n    <p>{character}</p>\r\n  </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n  name: PropTypes.string,\r\n  character: PropTypes.string,\r\n  imageUrl: PropTypes.string,\r\n};\r\n\r\nexport default Actor;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n//config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from \"../config\";\r\n//components\r\nimport Grid from \"./Grid\";\r\nimport Spiner from \"./Spiner\";\r\nimport BreadCrumb from \"./BreadCrumb\";\r\nimport MovieInfo from \"./MovieInfo\";\r\nimport MovieInfoBar from \"./MovieInfoBar\";\r\nimport Actor from \"./Actor\";\r\n//Hook\r\nimport { useMovieDFetch } from \"../hooks/useMovieFetch\";\r\n//Image\r\nimport NoImage from \"../images/no_image.jpg\";\r\n\r\nconst Movie = () => {\r\n  const { movieId } = useParams();\r\n\r\n  const { state: movie, loading, error } = useMovieDFetch(movieId);\r\n\r\n  if (loading) return <Spiner />;\r\n  if (error) return <div>Somting went wrong ....</div>;\r\n\r\n  return (\r\n    <>\r\n      <BreadCrumb movieTitle={movie.original_title} />\r\n      <MovieInfo movie={movie} />\r\n      <MovieInfoBar\r\n        time={movie.runtime}\r\n        budget={movie.budget}\r\n        revenue={movie.revenue}\r\n      />\r\n      <Grid header='Actors'>\r\n        {movie.actors.map(actor => (\r\n          <Actor \r\n            key={actor.credit_id}\r\n            name={actor.name}\r\n            character={actor.character}\r\n            imageUrl={\r\n              actor.profile_path\r\n              ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n              : NoImage\r\n            }\r\n          />\r\n        ))}\r\n        \r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import { useState, useEffect } from \"react\";\r\nimport API from \"../API\";\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nexport const useMovieDFetch = (movieId) => {\r\n  const [state, setState] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchMovie = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(false);\r\n\r\n        const movie = await API.fetchMovie(movieId);\r\n        const credits = await API.fetchCredits(movieId);\r\n        //get directors only\r\n        const directors = credits.crew.filter(\r\n          (member) => member.job === \"Director\"\r\n        );\r\n\r\n        setState({\r\n          ...movie,\r\n          actors: credits.cast,\r\n          directors,\r\n        });\r\n\r\n        setLoading(false);\r\n      } catch (error) {\r\n        setError(true);\r\n      }\r\n    };\r\n    const sessionState = isPersistedState(movieId);\r\n\r\n    if (sessionState) {\r\n      setState(sessionState);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    fetchMovie();\r\n  }, [movieId]);\r\n\r\n  //write to sessionStore\r\n  useEffect(() => {\r\n    sessionStorage.setItem(movieId, JSON.stringify(state));\r\n  }, [movieId, state]);\r\n\r\n  return { state, loading, error };\r\n};\r\n","import React from 'react'\r\n\r\nconst NotFound = () => <div>NotFound</div>\r\n\r\nexport default NotFound;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n     :root{\r\n         --maxWith: 1280px;\r\n         --white: #fff;\r\n         --lightGrey: #eee;\r\n         --medGrey: #353535;\r\n         --darkGrey: #1c1c1c;\r\n         --fontSuperBig: 2.5rem;\r\n         --fontBig: 1.5rem;\r\n         --fontMed: 1.2rem;\r\n         --fontSmail: 2rem;\r\n     }\r\n\r\n     *{\r\n         box-sizing: border-box;\r\n         font-family: 'Abel', sans-serif;\r\n\r\n     }\r\n\r\n     body{\r\n         margin: 0;\r\n         padding: 0;\r\n\r\n         h1{\r\n             font-size: 2rem;\r\n             font-weight: 600;\r\n             color:  var(--white);\r\n         }\r\n\r\n         h3{\r\n             font-size:1.1rem;\r\n             font-weight: 600;\r\n         }\r\n\r\n         p{\r\n            font-size: 1rem;\r\n            color: var(--white);\r\n         }\r\n         \r\n     }\r\n\r\n `;\r\n","import React from \"react\";\r\n// routing\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\n//Components\r\nimport Header from \"./components/Header\";\r\nimport Home from \"./components/Home\";\r\nimport Movie from \"./components/Movie\";\r\nimport NotFound from \"./components/NotFound\";\r\n\r\n//style\r\nimport { GlobalStyle } from \"./GlobalStyle\";\r\n\r\nconst App = () => (\r\n  <Router>\r\n    <Header />\r\n    <Routes>\r\n      <Route path='/' element={<Home />} />\r\n      <Route path='/:movieId' element={<Movie />} />\r\n      <Route path='/*' element={<NotFound />} />\r\n    </Routes>    \r\n    <GlobalStyle />\r\n  </Router>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}